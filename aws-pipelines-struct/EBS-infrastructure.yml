AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CodePipeline infrastructure for CI-CD testing'

Parameters:
  PythonVersion:
    Type: String
    Default: '3.9'
    Description: Python version to use
  RepositoryName:
    Type: String
    Description: Name of the RepositoryName
  BranchName:
    Type: String
    Description: Name of the repo branch with the project
  GitHubOwner:
    Type: String
    Description: Username of the owner of the github repository
  GitHubOAuthToken:
    Type: String
    Description: Authentication token to access github
    NoEcho: true
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id for the ElasticBeanstalk environment
  Subnet1:
    Type: AWS::EC2::Subnet::Id
    Description: first subnet for the ElasticBeanstalk application
  Subnet2:
    Type: AWS::EC2::Subnet::Id
    Description: second subnet for the ElasticBeanstalk application


Resources:

  ElasticBeanstalkApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: !Sub ${AWS::StackName}-app
      Description: "Application for the pipeline deployment"

  ElasticBeanstalkEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref ElasticBeanstalkApplication
      EnvironmentName: !Sub "${AWS::StackName}-env"
      SolutionStackName: "64bit Amazon Linux 2023 v4.5.1 running Python 3.12"
      OptionSettings:
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value: !Ref InstanceProfile
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: ServiceRole
          Value: !Ref EBServiceRole
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: LoadBalancerType
          Value: application
        - Namespace: aws:ec2:vpc
          OptionName: ELBScheme
          Value: internal
        - Namespace: aws:ec2:vpc
          OptionName: VPCId
          Value: !Ref VpcId
        - Namespace: aws:ec2:vpc
          OptionName: Subnets
          Value: !Join [',', [!Ref Subnet1, !Ref Subnet2]]
        - Namespace: aws:ec2:vpc
          OptionName: ELBSubnets
          Value: !Join [',', [!Ref Subnet1, !Ref Subnet2]]
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: SecurityGroups
          Value: !Ref EBSecurityGroup
        - Namespace: aws:elasticbeanstalk:environment:proxy
          OptionName: ProxyServer
          Value: nginx
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: HTTP_PROXY
          Value: http://proxy.eudra.org:8080
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: HTTPS_PROXY
          Value: http://proxy.eudra.org:8080 
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: NO_PROXY
          Value: "169.254.169.254,169.254.170.2,s3.eu-central-1.amazonaws.com,*.s3.eu-central-1.amazonaws.com,elasticbeanstalk-platform-assets-eu-central-1.s3.eu-central-1.amazonaws.com"
        
  EBVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.elasticbeanstalk
      VpcId: !Ref VpcId
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroupIds:
        - !Ref EBSecurityGroup

  EBHVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.elasticbeanstalk-health
      VpcId: !Ref VpcId
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroupIds:
        - !Ref EBSecurityGroup

  CFVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.cloudformation
      VpcId: !Ref VpcId
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroupIds:
        - !Ref EBSecurityGroup

  LogVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcId: !Ref VpcId
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroupIds:
        - !Ref EBSecurityGroup

  SQSVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.sqs
      VpcId: !Ref VpcId
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroupIds:
        - !Ref EBSecurityGroup

  S3VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VpcId
      VpcEndpointType: Gateway
      RouteTableIds:
        - rtb-0fe2d0ffbcc196901
        - rtb-0f2def0c0c24fb686
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:*'
            Resource: '*'

  EBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Elastic Beanstalk instances
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  EBServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: elasticbeanstalk.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService
        - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth

  EBInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EBInstanceRole


  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${AWS::StackName}-pipeline"
      RoleArn: !GetAtt CodepipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: artifactbucket363757
      Stages:
        - Name: Source
          Actions:
           - Name: Source
             ActionTypeId:
               Category: Source
               Owner: ThirdParty
               Provider: GitHub
               Version: '1'
             Configuration:
               Owner: !Ref GitHubOwner
               Repo: !Ref RepositoryName
               Branch: !Ref BranchName
               OAuthToken: !Ref GitHubOAuthToken
             OutputArtifacts:
              - Name: SourceOutput
             RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref BuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
        - Name: Test
          Actions:
            - Name: Test
              ActionTypeId:
                Category: Test
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref TestProject
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ElasticBeanstalk
                Version: '1'
              Configuration:
                ApplicationName: !Ref ElasticBeanstalkApplication
                EnvironmentName: !Ref ElasticBeanstalkEnvironment
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1

  artifactbucket363757:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "artifactbucket363757"
      VersioningConfiguration:
        Status: Enabled

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: "codebuild.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*

  CodepipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: "codepipeline.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipeline_FullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
        - arn:aws:iam::aws:policy/AdministratorAccess-AWSElasticBeanstalk
      Policies:
          - PolicyName: CloudFormationAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:DeleteBucket
                  - s3:PutBucketPolicy
                  - s3:DeleteBucketPolicy
                  - s3:GetBucketPolicy
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${artifactbucket363757}
                  - !Sub arn:aws:s3:::${artifactbucket363757}/*

              # - Effect: Allow
              #   Action:
              #     - logs:CreateLogStream
              #     - logs:PutLogEvents
              #   Resource:
              #     - !Sub arn:aws:logs:eu-central-1:730335357068:log-group:/aws/codebuild/${BuildProject}:*
              #     - !Sub arn:aws:logs:eu-central-1:730335357068:log-group:/aws/codebuild/${TestProject}:*
              #     - !Sub arn:aws:logs:eu-central-1:730335357068:log-group:/aws/codebuild/${DeployProject}:*
              #     - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/AWSPipelineIntegrationDeployment-build:*




  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-build
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        EnvironmentVariables:
          - Name: PYTHON_VERSION
            Value: !Ref PythonVersion
      Source:
        Type: CODEPIPELINE
        BuildSpec: aws-pipelines-templates/buildspec.yml

  TestProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-test
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        EnvironmentVariables:
          - Name: PYTHON_VERSION
            Value: !Ref PythonVersion
      Source:
        Type: CODEPIPELINE
        BuildSpec: aws-pipelines-templates/testspec.yml


  DeployProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-deploy
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        EnvironmentVariables:
          - Name: PYTHON_VERSION
            Value: !Ref PythonVersion
      Source:
        Type: CODEPIPELINE
        BuildSpec: aws-pipelines-templates/deployspec.yml

Outputs:
  BuildProjectName:
    Description: Name of the build project
    Value: !Ref BuildProject
    Export:
      Name: !Sub ${AWS::StackName}-BuildProject

